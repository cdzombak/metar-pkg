name: Build and Release metar

"on":
  schedule:
    - cron: "0 6 * * *"  # Daily at 6 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64,linux/386,linux/arm/v7"
  FPM_VERSION: 1.15.1
  UPSTREAM_REPO: "RyuKojiro/metar"

jobs:
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get upstream latest commit
        id: upstream
        run: |
          LATEST_SHA=$(curl -s "https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/commits/master" | jq -r '.sha')
          echo "latest_sha=${LATEST_SHA}" >> "$GITHUB_OUTPUT"
          echo "Latest upstream SHA: ${LATEST_SHA}"

      - name: Get last processed commit
        id: last_build
        run: |
          if [ -f LAST-COMMIT-SHA ]; then
            LAST_SHA=$(cat LAST-COMMIT-SHA)
            echo "last_sha=${LAST_SHA}" >> "$GITHUB_OUTPUT"
            echo "Last processed SHA: ${LAST_SHA}"
          else
            echo "last_sha=" >> "$GITHUB_OUTPUT"
            echo "No previous build found"
          fi

      - name: Generate version number
        id: version
        run: |
          BUILD_DATE=$(date +%Y.%m.%d)

          # Check if we already have a version for today
          if [ -f VERSION-COUNTER ]; then
            CURRENT_DATE=$(head -1 VERSION-COUNTER)
            if [ "$CURRENT_DATE" = "$BUILD_DATE" ]; then
              COUNTER=$(tail -1 VERSION-COUNTER)
              COUNTER=$((COUNTER + 1))
            else
              COUNTER=1
            fi
          else
            COUNTER=1
          fi

          VERSION="v${BUILD_DATE}.${COUNTER}"
          {
            echo "version=${VERSION}"
            echo "build_date=${BUILD_DATE}"
            echo "counter=${COUNTER}"
          } >> "$GITHUB_OUTPUT"
          echo "Generated version: ${VERSION}"

    outputs:
      upstream_sha: ${{ steps.upstream.outputs.latest_sha }}
      last_sha: ${{ steps.last_build.outputs.last_sha }}
      version: ${{ steps.version.outputs.version }}
      build_date: ${{ steps.version.outputs.build_date }}
      counter: ${{ steps.version.outputs.counter }}
      has_updates: ${{ steps.upstream.outputs.latest_sha != steps.last_build.outputs.last_sha }}

  actionlint:
    name: Lint GitHub Actions
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run actionlint
      uses: raven-actions/actionlint@v2

  build:
    name: Build (${{ matrix.platform.arch }})
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - arch: amd64
            # Native build on x86_64 runner
          - arch: arm64
            qemu_arch: aarch64
            distro: ubuntu24.04
          - arch: armv7
            qemu_arch: armv7
            distro: ubuntu24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download upstream source
        run: |
          wget -O upstream.tar.gz "https://github.com/${{ env.UPSTREAM_REPO }}/archive/${{ needs.check-updates.outputs.upstream_sha }}.tar.gz"
          tar -xzf upstream.tar.gz
          mv metar-${{ needs.check-updates.outputs.upstream_sha }}/* .
          rm -rf metar-${{ needs.check-updates.outputs.upstream_sha }} upstream.tar.gz

      - name: Build binary (native amd64)
        if: matrix.platform.arch == 'amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcurl4-openssl-dev
          mkdir -p bin out
          gcc -Wall -o bin/metar src/main.c -lcurl
          cp bin/metar out/metar-linux-${{ matrix.platform.arch }}

      - name: Build binary (emulated ${{ matrix.platform.arch }})
        if: matrix.platform.arch != 'amd64'
        uses: uraimo/run-on-arch-action@v3
        with:
          arch: ${{ matrix.platform.qemu_arch }}
          distro: ${{ matrix.platform.distro }}
          githubToken: ${{ github.token }}

          setup: |
            mkdir -p "${PWD}/out"

          dockerRunArgs: |
            --volume "${PWD}:/workspace"

          install: |
            apt-get update -q -y
            apt-get install -q -y build-essential libcurl4-openssl-dev

          run: |
            cd /workspace
            mkdir -p bin
            gcc -Wall -o bin/metar src/main.c -lcurl
            cp bin/metar out/metar-linux-${{ matrix.platform.arch }}

      - name: Verify binary
        run: |
          echo "=== Binary architecture ==="
          file out/metar-linux-${{ matrix.platform.arch }}
          echo "=== Binary size ==="
          ls -lh out/metar-linux-${{ matrix.platform.arch }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: metar-binary-${{ matrix.platform.arch }}
          path: out/metar-linux-${{ matrix.platform.arch }}

  build-macos:
    name: Build macOS (arm64)
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true'
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download upstream source
        run: |
          curl -L https://github.com/RyuKojiro/metar/archive/refs/heads/master.tar.gz -o metar-source.tar.gz
          tar -xzf metar-source.tar.gz
          mv metar-master src

      - name: Install dependencies
        run: |
          # macOS should already have curl via system or Xcode command line tools
          # libcurl is available via system
          echo "Dependencies already available on macOS"

      - name: Build binary
        run: |
          mkdir -p out
          cd src
          # Build with system libcurl on macOS
          gcc -Wall -o ../out/metar-darwin-arm64 main.c -lcurl

          echo "=== Binary info ==="
          file ../out/metar-darwin-arm64
          echo "=== Binary size ==="
          ls -lh ../out/metar-darwin-arm64

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: metar-binary-darwin-arm64
          path: out/metar-darwin-arm64

  package:
    name: Build Packages
    needs: [check-updates, build, build-macos]
    if: needs.check-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download upstream source (for man page)
        run: |
          wget -O upstream.tar.gz "https://github.com/${{ env.UPSTREAM_REPO }}/archive/${{ needs.check-updates.outputs.upstream_sha }}.tar.gz"
          tar -xzf upstream.tar.gz
          mv metar-${{ needs.check-updates.outputs.upstream_sha }}/* .
          rm -rf metar-${{ needs.check-updates.outputs.upstream_sha }} upstream.tar.gz

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: metar-binary-*
          path: binaries
          merge-multiple: false

      - name: Setup Ruby for fpm
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
      - name: Install fpm
        run: |
          gem install --no-document fpm -v "$FPM_VERSION"

      - name: Build Debian packages
        run: |
          VERSION_NO_V="${{ needs.check-updates.outputs.version }}"
          VERSION_NO_V="${VERSION_NO_V:1}"  # Remove 'v' prefix

          mkdir -p out

          # Create package structure
          mkdir -p pkg/usr/bin pkg/usr/share/man/man1

          for arch in amd64 arm64 armv7; do
            echo "Building ${arch} package..."

            # Copy binary
            cp binaries/metar-binary-${arch}/metar-linux-${arch} pkg/usr/bin/metar
            chmod 755 pkg/usr/bin/metar

            # Copy man page if it exists
            cp src/metar.1 pkg/usr/share/man/man1/ || true

            # Map architecture names for Debian packages
            case "${arch}" in
              armv7) deb_arch="armhf" ;;
              *) deb_arch="${arch}" ;;
            esac

            fpm -s dir -t deb \
              -n metar \
              -v "${VERSION_NO_V}" \
              -a "${deb_arch}" \
              -p "out/metar_${VERSION_NO_V}_${deb_arch}.deb" \
              --description "Command-line METAR weather data tool" \
              --url "https://github.com/RyuKojiro/metar" \
              --license "MIT" \
              --maintainer "cdzombak <cdzombak@gmail.com>" \
              --depends "libcurl4" \
              -C pkg .
          done

      - name: Prepare release artifacts
        working-directory: out/
        run: |
          mkdir ./gh-release
          cp ./*.deb ./gh-release/

          # Create Linux tarballs
          for arch in amd64 arm64; do
            tar -czf ./gh-release/metar-${{ needs.check-updates.outputs.version }}-linux-${arch}.tar.gz -C ../binaries/metar-binary-${arch} metar-linux-${arch}
          done
          # Create Linux armv7 tarball
          tar -czf ./gh-release/metar-${{ needs.check-updates.outputs.version }}-linux-armv7.tar.gz -C ../binaries/metar-binary-armv7 metar-linux-armv7

          # Create Darwin arm64 tarball from macOS binary
          tar -czf ./gh-release/metar-${{ needs.check-updates.outputs.version }}-darwin-arm64.tar.gz -C ../binaries/metar-binary-darwin-arm64 metar-darwin-arm64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metar-artifacts
          path: out/gh-release/*

  docker:
    name: Docker Images
    needs: [check-updates, build]
    if: needs.check-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: metar-binary-*
          path: binaries
          merge-multiple: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository_owner }}/metar
            ghcr.io/${{ github.repository_owner }}/metar
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.check-updates.outputs.version }}

      - name: Build multi-arch image with pre-built binaries
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            BUILDPLATFORM=${{ runner.arch }}
          outputs: type=image,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  finalize:
    name: Finalize Release
    needs: [check-updates, package, docker]
    if: needs.check-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update tracking files
        run: |
          echo "${{ needs.check-updates.outputs.upstream_sha }}" > LAST-COMMIT-SHA
          echo "${{ needs.check-updates.outputs.build_date }}" > VERSION-COUNTER
          echo "${{ needs.check-updates.outputs.counter }}" >> VERSION-COUNTER

      - name: Commit tracking files
        uses: EndBug/add-and-commit@v9
        with:
          add: "LAST-COMMIT-SHA VERSION-COUNTER"
          author_name: metar-release-bot
          author_email: metar-release-bot@users.noreply.github.com
          message: "Update tracking files for ${{ needs.check-updates.outputs.version }}"
          pathspec_error_handling: exitImmediately
          push: true
          tag: "${{ needs.check-updates.outputs.version }}"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: metar-artifacts
          path: out

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: out/*
          prerelease: false
          draft: false
          fail_on_unmatched_files: true
          generate_release_notes: false
          tag_name: "${{ needs.check-updates.outputs.version }}"
          name: "metar ${{ needs.check-updates.outputs.version }}"
          body: |
            Automated build of metar from upstream commit ${{ needs.check-updates.outputs.upstream_sha }}.

            Upstream repository: https://github.com/${{ env.UPSTREAM_REPO }}
            Upstream commit: https://github.com/${{ env.UPSTREAM_REPO }}/commit/${{ needs.check-updates.outputs.upstream_sha }}

  aptly:
    name: Aptly (3p repo)
    needs: [check-updates, finalize]
    if: needs.check-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: metar-artifacts
          path: out

      - name: Login to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:github-actions

      - name: Push to Aptly Repo
        shell: bash
        run: |
          set -x
          for DEB in out/*.deb; do
            curl -u "${{ secrets.APTLY_CRED }}" \
              -fsS -X POST \
              -F file=@"${DEB}" \
              "${{ secrets.APTLY_API }}/files/metar-${{ needs.check-updates.outputs.version }}"
          done
          curl -u "${{ secrets.APTLY_CRED }}" \
            -fsS -X POST \
            "${{ secrets.APTLY_API }}/repos/3p/file/metar-${{ needs.check-updates.outputs.version }}?forceReplace=1"

      - name: Update Published Aptly Repo
        run: |
          set -x
          curl -u "${{ secrets.APTLY_CRED }}" \
            -fsS -X PUT \
            -H 'Content-Type: application/json' \
            --data '{"ForceOverwrite": true}' \
            "${{ secrets.APTLY_API }}/publish/s3:dist.cdzombak.net:deb_3p/any?_async=true"

  homebrew:
    name: Update Homebrew Tap (3p)
    needs: [check-updates, finalize]
    if: needs.check-updates.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout homebrew-3p repo
        uses: actions/checkout@v4
        with:
          repository: cdzombak/homebrew-3p
          token: ${{ secrets.HOMEBREW_RELEASER_PAT }}
          path: homebrew-tap

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: metar-artifacts
          path: artifacts

      - name: Generate SHA256 checksums
        run: |
          cd artifacts
          {
            sha256sum metar-${{ needs.check-updates.outputs.version }}-darwin-arm64.tar.gz
            sha256sum metar-${{ needs.check-updates.outputs.version }}-linux-amd64.tar.gz
            sha256sum metar-${{ needs.check-updates.outputs.version }}-linux-arm64.tar.gz
          } > checksums.txt
          cat checksums.txt

      - name: Create/Update Homebrew formula
        run: |
          VERSION_NO_V="${{ needs.check-updates.outputs.version }}"
          VERSION_NO_V="${VERSION_NO_V:1}"  # Remove 'v' prefix

          # Get checksums
          DARWIN_ARM64_SHA=$(grep "darwin-arm64" artifacts/checksums.txt | cut -d' ' -f1)
          LINUX_AMD64_SHA=$(grep "linux-amd64" artifacts/checksums.txt | cut -d' ' -f1)
          LINUX_ARM64_SHA=$(grep "linux-arm64" artifacts/checksums.txt | cut -d' ' -f1)

          # Create formula directory if it doesn't exist
          mkdir -p homebrew-tap/Formula

          # Generate formula
          cat > homebrew-tap/Formula/metar.rb << EOF
          class Metar < Formula
            desc "Command-line METAR weather data tool"
            homepage "https://github.com/RyuKojiro/metar"
            version "${VERSION_NO_V}"
            license "MIT"

            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/cdzombak/metar-pkg/releases/download/${{ needs.check-updates.outputs.version }}/metar-${{ needs.check-updates.outputs.version }}-darwin-arm64.tar.gz"
                sha256 "${DARWIN_ARM64_SHA}"
              else
                odie "Intel Macs are not supported. Please use an Apple Silicon Mac."
              end
            end

            on_linux do
              on_intel do
                url "https://github.com/cdzombak/metar-pkg/releases/download/${{ needs.check-updates.outputs.version }}/metar-${{ needs.check-updates.outputs.version }}-linux-amd64.tar.gz"
                sha256 "${LINUX_AMD64_SHA}"
              end
              on_arm do
                url "https://github.com/cdzombak/metar-pkg/releases/download/${{ needs.check-updates.outputs.version }}/metar-${{ needs.check-updates.outputs.version }}-linux-arm64.tar.gz"
                sha256 "${LINUX_ARM64_SHA}"
              end
            end

            depends_on "curl"

            def install
              # Each tarball contains the binary named appropriately for the platform
              # We need to rename it to just "metar" when installing
              if OS.linux?
                if Hardware::CPU.intel?
                  bin.install "metar-linux-amd64" => "metar"
                elsif Hardware::CPU.arm?
                  bin.install "metar-linux-arm64" => "metar"
                end
              elsif OS.mac?
                if Hardware::CPU.arm?
                  bin.install "metar-darwin-arm64" => "metar"
                else
                  odie "Intel Macs are not supported. Please use an Apple Silicon Mac."
                end
              end
            end

            test do
              system "#{bin}/metar", "--help"
            end
          end
          EOF

      - name: Commit and push formula
        run: |
          cd homebrew-tap
          git config user.name "homebrew-releaser-bot"
          git config user.email "homebrew-releaser-bot@users.noreply.github.com"
          git add Formula/metar.rb
          git commit -m "Update metar formula to ${{ needs.check-updates.outputs.version }}"
          git push